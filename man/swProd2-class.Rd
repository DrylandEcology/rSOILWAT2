% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/E_swProd2.R
\docType{class}
\name{swProd2-class}
\alias{swProd2-class}
\alias{swProd2}
\alias{get_swProd,swProd2-method}
\alias{get_swProd2}
\alias{swProd_Composition,swProd2-method}
\alias{swProd_Albedo,swProd2-method}
\alias{swProd_CanopyHeight,swProd2-method}
\alias{swProd_VegInterParam,swProd2-method}
\alias{swProd_LitterInterParam,swProd2-method}
\alias{swProd_EsTpartitioning_param,swProd2-method}
\alias{swProd_Es_param_limit,swProd2-method}
\alias{swProd_Shade,swProd2-method}
\alias{swProd_HydrRedstro_use,swProd2-method}
\alias{swProd_HydrRedstro,swProd2-method}
\alias{swProd_CritSoilWaterPotential,swProd2-method}
\alias{swProd_CO2Coefficients,swProd2-method}
\alias{swProd_MonProd_veg,swProd2,numeric-method}
\alias{swProd_MonProd_veg,swProd2,character-method}
\alias{set_swProd<-,swProd2-method}
\alias{swProd_Composition<-,swProd2-method}
\alias{swProd_Albedo<-,swProd2-method}
\alias{swProd_CanopyHeight<-,swProd2-method}
\alias{swProd_VegInterParam<-,swProd2-method}
\alias{swProd_LitterInterParam<-,swProd2-method}
\alias{swProd_EsTpartitioning_param<-,swProd2-method}
\alias{swProd_Es_param_limit<-,swProd2-method}
\alias{swProd_Shade<-,swProd2-method}
\alias{swProd_HydrRedstro_use<-,swProd2-method}
\alias{swProd_HydrRedstro<-,swProd2-method}
\alias{swProd_CritSoilWaterPotential<-,swProd2-method}
\alias{swProd_CO2Coefficients<-,swProd2-method}
\alias{swProd_MonProd_veg<-,swProd2,numeric,matrix-method}
\alias{swProd_MonProd_veg<-,swProd2,character,matrix-method}
\title{Class \code{"swProd2"}}
\usage{
swProd2(...)

\S4method{get_swProd}{swProd2}(object)

get_swProd2(object)

\S4method{swProd_Composition}{swProd2}(object)

\S4method{swProd_Albedo}{swProd2}(object)

\S4method{swProd_CanopyHeight}{swProd2}(object)

\S4method{swProd_VegInterParam}{swProd2}(object)

\S4method{swProd_LitterInterParam}{swProd2}(object)

\S4method{swProd_EsTpartitioning_param}{swProd2}(object)

\S4method{swProd_Es_param_limit}{swProd2}(object)

\S4method{swProd_Shade}{swProd2}(object)

\S4method{swProd_HydrRedstro_use}{swProd2}(object)

\S4method{swProd_HydrRedstro}{swProd2}(object)

\S4method{swProd_CritSoilWaterPotential}{swProd2}(object)

\S4method{swProd_CO2Coefficients}{swProd2}(object)

\S4method{swProd_MonProd_veg}{swProd2,numeric}(object, vegtype)

\S4method{swProd_MonProd_veg}{swProd2,character}(object, vegtype)

\S4method{set_swProd}{swProd2}(object) <- value

\S4method{swProd_Composition}{swProd2}(object) <- value

\S4method{swProd_Albedo}{swProd2}(object) <- value

\S4method{swProd_CanopyHeight}{swProd2}(object) <- value

\S4method{swProd_VegInterParam}{swProd2}(object) <- value

\S4method{swProd_LitterInterParam}{swProd2}(object) <- value

\S4method{swProd_EsTpartitioning_param}{swProd2}(object) <- value

\S4method{swProd_Es_param_limit}{swProd2}(object) <- value

\S4method{swProd_Shade}{swProd2}(object) <- value

\S4method{swProd_HydrRedstro_use}{swProd2}(object) <- value

\S4method{swProd_HydrRedstro}{swProd2}(object) <- value

\S4method{swProd_CritSoilWaterPotential}{swProd2}(object) <- value

\S4method{swProd_CO2Coefficients}{swProd2}(object) <- value

\S4method{swProd_MonProd_veg}{swProd2,numeric,matrix}(object, vegtype) <- value

\S4method{swProd_MonProd_veg}{swProd2,character,matrix}(object, vegtype) <- value
}
\arguments{
\item{...}{Arguments to the helper constructor function.
Dots can either contain objects to copy into slots of that class
(must be named identical to the corresponding slot) or
be one object of that class (in which case it will be copied and
any missing slots will take their default values).
If dots are missing, then corresponding values of
\code{rSOILWAT2::sw_exampleData}
(i.e., the \pkg{SOILWAT2} "testing" defaults) are copied.}

\item{object}{An object of class \code{\linkS4class{swProd2}}.}

\item{vegtype}{The name or index of the vegetation type.}

\item{value}{A value to assign to a specific slot of the object.}
}
\description{
Class \code{"swProd2"} is superseding class \code{"swProd"} starting with
\pkg{rSOILWAT2} v6.5.0 and \var{SOILWAT2} v8.3.0.
}
\details{
The matrix slots of class \code{"swProd2"} have now consistently
plant functional types as rows and variables as columns
(instead of a mix as with class \code{"swProd"}).

The new plant functional types have different names and are now sorted
consistently, see \code{\link{mapVegTypes}}.

The methods listed below work on this class and the proper slot of the class
  \code{\linkS4class{swInputData}}.
}
\examples{
showClass("swProd2")
x <- new("swProd2")
x <- swProd2()

}
\seealso{
\code{\linkS4class{swInputData}}

\code{\link{get_swProd}}
}
